import random
import os
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackContext

# Load token from environment variable for security
# English: Loading bot token from environment variable for better security
# Russian: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '7223734470:AAGoQflInEfUz5APYflFb1BciDwyTqNK-II')

# English: Database with random data for testing
# Russian: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
DATABASE = [
    {"snils": "123-45-6789", "fio": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", "dob": "2000-01-01"},
    {"snils": "987-65-4321", "fio": "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á", "dob": "1999-02-15"},
    {"snils": "555-44-3333", "fio": "–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á", "dob": "1998-03-25"},
    {"snils": "444-33-2222", "fio": "–ö–æ–∑–ª–æ–≤ –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", "dob": "2001-04-30"},
    {"snils": "111-22-3333", "fio": "–ê–ª–µ–∫—Å–µ–µ–≤–∞ –ú–∞—Ä–∏—è –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞", "dob": "1997-05-10"},
    {"snils": "333-22-4444", "fio": "–°–º–∏—Ä–Ω–æ–≤–∞ –û–ª—å–≥–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞", "dob": "1996-06-20"},
    {"snils": "666-77-8888", "fio": "–¢–∏–º–æ—Ñ–µ–µ–≤ –ê—Ä—Ç–µ–º –°–µ—Ä–≥–µ–µ–≤–∏—á", "dob": "1995-07-05"},
    {"snils": "999-88-7777", "fio": "–ì–æ—Ä–¥–µ–µ–≤ –ü–∞–≤–µ–ª –í–∞—Å–∏–ª—å–µ–≤–∏—á", "dob": "2002-08-15"},
    {"snils": "222-33-4444", "fio": "–†–æ–º–∞–Ω–æ–≤ –°–µ—Ä–≥–µ–π –ü–∞–≤–ª–æ–≤–∏—á", "dob": "1998-09-25"},
    {"snils": "777-66-5555", "fio": "–ë–∞—Ä—Å–æ–≤–∞ –ê–Ω–Ω–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞", "dob": "1999-10-05"}
]

# English: Conversation states
# Russian: –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
MAIN_MENU, SNILS, FIO, DOB = range(4)

# English: Validation functions
# Russian: –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
def validate_snils(snils: str) -> bool:
    # English: Validate SNILS format (XXX-XXX-XXX XX)
    # Russian: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –°–ù–ò–õ–° (XXX-XXX-XXX XX)
    import re
    pattern = r'^\d{3}-\d{3}-\d{3} \d{2}$'
    return bool(re.match(pattern, snils))

def validate_date(date_str: str) -> bool:
    # English: Validate date format (YYYY-MM-DD)
    # Russian: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã (YYYY-MM-DD)
    try:
        datetime.strptime(date_str, '%Y-%m-%d')
        return True
    except ValueError:
        return False

# English: Main menu keyboard
# Russian: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("–ß–∞—Ç –ø–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫–æ–≤"), KeyboardButton("–ü–æ–º–æ—â—å –º–µ–Ω—Ç–æ—Ä–∞")],
        [KeyboardButton("/start")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# English: Start command handler
# Russian: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
def start(update: Update, context: CallbackContext) -> int:
    # English: Clear any existing user data
    # Russian: –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_keyboard(),
        parse_mode=ParseMode.HTML
    )
    return MAIN_MENU

# English: Main menu handler
# Russian: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    
    if text == "–ß–∞—Ç –ø–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫–æ–≤":
        update.message.reply_text(
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –ø–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –°–ù–ò–õ–°\n"
            "–§–æ—Ä–º–∞—Ç: XXX-XXX-XXX XX\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 123-456-789 00"
        )
        return SNILS
    elif text == "–ü–æ–º–æ—â—å –º–µ–Ω—Ç–æ—Ä–∞":
        return mentor_help(update, context)
    else:
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_main_keyboard()
        )
        return MAIN_MENU

# English: SNILS input handler
# Russian: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –°–ù–ò–õ–°
def get_snils(update: Update, context: CallbackContext) -> int:
    user_snils = update.message.text
    
    if not validate_snils(user_snils):
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –°–ù–ò–õ–°!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –°–ù–ò–õ–° –≤ —Ñ–æ—Ä–º–∞—Ç–µ: XXX-XXX-XXX XX\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 123-456-789 00"
        )
        return SNILS
    
    context.user_data["snils"] = user_snils
    update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ):")
    return FIO

# English: FIO input handler
# Russian: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û
def get_fio(update: Update, context: CallbackContext) -> int:
    user_fio = update.message.text.strip()
    
    if len(user_fio.split()) < 2:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)"
        )
        return FIO
    
    context.user_data["fio"] = user_fio
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 2000-01-01"
    )
    return DOB

# English: Date of birth input handler
# Russian: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
def get_dob(update: Update, context: CallbackContext) -> int:
    user_dob = update.message.text
    
    if not validate_date(user_dob):
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2000-01-01"
        )
        return DOB
    
    context.user_data["dob"] = user_dob
    return check_user_data(update, context)

# English: User data verification
# Russian: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_user_data(update: Update, context: CallbackContext) -> int:
    user_data = context.user_data
    user_found = None
    
    for entry in DATABASE:
        if (entry["snils"] == user_data.get("snils") and
            entry["fio"] == user_data.get("fio") and
            entry["dob"] == user_data.get("dob")):
            user_found = entry
            break

    if user_found:
        update.message.reply_text(
            "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!\n\n"
            "–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –ø–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫–æ–≤: [–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ]\n\n"
            "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=get_main_keyboard()
        )
    else:
        update.message.reply_text(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
            "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=get_main_keyboard()
        )
    
    context.user_data.clear()
    return MAIN_MENU

# English: Mentor help handler
# Russian: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏ –º–µ–Ω—Ç–æ—Ä–∞
def mentor_help(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "üë®‚Äçüè´ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ—Ç –º–µ–Ω—Ç–æ—Ä–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
        "@sheeshlove\n\n"
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=get_main_keyboard()
    )
    return MAIN_MENU

# English: Cancel command handler
# Russian: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
def cancel(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()
    update.message.reply_text(
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

# English: Main function to run the bot
# Russian: –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    # English: Initialize bot and dispatcher
    # Russian: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # English: Add conversation handler
    # Russian: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                MessageHandler(Filters.text & ~Filters.command, main_menu)
            ],
            SNILS: [
                MessageHandler(Filters.text & ~Filters.command, get_snils)
            ],
            FIO: [
                MessageHandler(Filters.text & ~Filters.command, get_fio)
            ],
            DOB: [
                MessageHandler(Filters.text & ~Filters.command, get_dob)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    dispatcher.add_handler(conv_handler)
    
    # English: Start the bot
    # Russian: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("Bot started...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
