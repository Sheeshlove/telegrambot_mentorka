import telebot
from telebot import types
import os
from dotenv import load_dotenv

# English: Load environment variables
# Russian: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# English: Initialize bot with token
# Russian: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '7223734470:AAGoQflInEfUz5APYflFb1BciDwyTqNK-II')
bot = telebot.TeleBot(TOKEN)

# English: States for conversation
# Russian: –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
class States:
    MAIN_MENU = 0
    SNILS = 1
    FIO = 2
    DOB = 3

# English: User states storage
# Russian: –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# English: Get main menu keyboard
# Russian: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("–ß–∞—Ç –ø–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫–æ–≤"),
        types.KeyboardButton("–ü–æ–º–æ—â—å –º–µ–Ω—Ç–æ—Ä–∞")
    )
    keyboard.row(types.KeyboardButton("/start"))
    return keyboard

# English: Start command handler
# Russian: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    # English: Clear user state and data
    # Russian: –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    user_states[user_id] = States.MAIN_MENU
    
    # English: Get user's first name for personal greeting
    # Russian: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    user_name = message.from_user.first_name
    
    # English: Send welcome message
    # Russian: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–ß–∞—Ç –ø–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫–æ–≤' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–ü–æ–º–æ—â—å –º–µ–Ω—Ç–æ—Ä–∞' –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω—Ç–æ—Ä–æ–º\n"
        "‚Ä¢ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )

# English: Main menu handler
# Russian: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == States.MAIN_MENU)
def main_menu(message):
    if message.text == "–ß–∞—Ç –ø–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫–æ–≤":
        user_states[message.from_user.id] = States.SNILS
        bot.send_message(
            message.chat.id,
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –ø–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –°–ù–ò–õ–°\n"
            "–§–æ—Ä–º–∞—Ç: XXX-XXX-XXX XX\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 123-456-789 00"
        )
    elif message.text == "–ü–æ–º–æ—â—å –º–µ–Ω—Ç–æ—Ä–∞":
        bot.send_message(
            message.chat.id,
            "üë®‚Äçüè´ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ—Ç –º–µ–Ω—Ç–æ—Ä–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
            "@sheeshlove\n\n"
            "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=get_main_keyboard()
        )
    else:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_main_keyboard()
        )

# English: SNILS input handler
# Russian: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –°–ù–ò–õ–°
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == States.SNILS)
def get_snils(message):
    from utils.validators import validate_snils
    
    if not validate_snils(message.text):
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –°–ù–ò–õ–°!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –°–ù–ò–õ–° –≤ —Ñ–æ—Ä–º–∞—Ç–µ: XXX-XXX-XXX XX\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 123-456-789 00"
        )
        return
    
    # English: Store SNILS and move to FIO state
    # Russian: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –°–ù–ò–õ–° –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –§–ò–û
    user_states[message.from_user.id] = States.FIO
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ):")

# English: FIO input handler
# Russian: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == States.FIO)
def get_fio(message):
    from utils.validators import validate_fio
    
    if not validate_fio(message.text):
        bot.send_message(
            message.chat.id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)"
        )
        return
    
    # English: Store FIO and move to DOB state
    # Russian: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    user_states[message.from_user.id] = States.DOB
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 2000-01-01"
    )

# English: Date of birth input handler
# Russian: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == States.DOB)
def get_dob(message):
    from utils.validators import validate_date
    from database.mock_data import DATABASE
    
    if not validate_date(message.text):
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2000-01-01"
        )
        return
    
    # English: Check user data in database
    # Russian: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    user_found = None
    for entry in DATABASE:
        if (entry["snils"] == message.text and
            entry["fio"] == message.text and
            entry["dob"] == message.text):
            user_found = entry
            break

    if user_found:
        bot.send_message(
            message.chat.id,
            "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!\n\n"
            "–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –ø–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫–æ–≤: [–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ]\n\n"
            "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=get_main_keyboard()
        )
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
            "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=get_main_keyboard()
        )
    
    # English: Reset user state
    # Russian: –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[message.from_user.id] = States.MAIN_MENU

# English: Run the bot
# Russian: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("Bot started...")
    bot.infinity_polling() 